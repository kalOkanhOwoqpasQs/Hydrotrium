for i, bot in pairs(getBots()) do
    if getBot().name:upper() == bot.name:upper() then
        indexbot = i
    end
end

setBool("Auto Reconnect",false)
seed = block + 1
worlds = {}
infoid = {}
index = 1
local tilePack = 0
local tileBlock = 0
local tileSeed = 0
local tileEvent = 0
local setting = {}
local params = {
    block = 1,
    seed = 1,
    pack = 1,
    event = 1,
    timechecker = os.time()
}
seedX = dropseedX - 1
seedY = dropseedY - 1
packX = droppackX - 1
packY = droppackY - 1
blockX = dropblockX - 1
blockY = dropblockY - 1
eventX = dropeventX - 1
eventY = dropeventY -1
str = ""

for i =  1,worldperbot do
    table.insert(worlds,farmList[math.floor((indexbot - 1) * worldperbot + i)])
end

setting.recycles = function()
    if findItem(block) > 0 then
        sendPacket("action|trash\n|itemID|"..block,2)
        sleep(1000)
        sendPacket("action|dialog_return\ndialog_name|trash_item\nitemID|" .. block .. "|\ncount|" .. findItem(block),2)
        sleep(1000)
    end
end

setting.split = function(str, ptr)
    if not ptr then 
        ptr = "%s"
    end
    local tbl = {}
    for string in string.gmatch(str, ptr) do
        table.insert(tbl, string) 
    end
    return tbl
end

setting.botstatus = function()
    str = ""
    for _, bot in pairs(getBots()) do
        str = str.."\n"..string.upper(bot.name)..""
    end
    return str
end

setting.botworld = function()
    str = ""
    for _, bot in pairs(getBots()) do
        str = str.."\n"..string.upper(bot.world).."" 
    end
    return str
end

setting.botnotif = function()
    str = ""
    for _, bot in pairs(getBots()) do
        str = str.."\n"..string.upper(bot.status).."" 
    end
    return str
end

setting.botgems = function()
    local count = 0
    for _,bot in pairs(getBots()) do
        count = count + bot.gems
    end
    return count
end

setting.hookblock = function()
    str = ""
	for i = 1, #storageblock do
        str = str.."\nStorage blocks - "..i.." : "..(infoid[storageblock[i]] or "???")..""
    end
    return str
end

setting.hookseed = function()
    str = ""
	for i = 1, #storageseed do
        str = str.."\nStorage seeds - "..i.." : "..(infoid[storageseed[i]] or "???")..""
    end
    return str
end

setting.hookpack = function()
    str = ""
	for i = 1, #storagepack do
        str = str.."\nStorage packs - "..i.." : "..(infoid[storagepack[i]] or "???")..""
    end
    return str
end

setting.hookevent = function()
    str = ""
	for i = 1, #storageevent do
        str = str.."\nStorage events - "..i.." : "..(infoid[storageevent[i]] or "???")..""
    end
    return str
end

setting.goodtimes = function(estimates)
    local seconds = tonumber(estimates)
    if seconds <= 0 then
        return "00:00:00";
    else
        hours = string.format("%02.f", math.floor(estimates/3600));
        minutes = string.format("%02.f", math.floor(estimates/60 - (hours*60)));
        seconds = string.format("%02.f", math.floor(estimates - hours*3600 - minutes *60));
        return ""..hours.." : "..minutes.." : "..seconds..""
    end
end

setting.webhookinfo = function()
	if botinfo then
        local text = [[
            $webHookUrl = "]]..linkbotinfo..[[/messages/]]..messageidbotinfo..[["
            $payload = @{
                username = "Debra's"
                embeds = @(
                    @{
                        title = "BOT STATICS [HARVEST]"
                        color = "]]..math.random(111111,999999)..[["
                        fields = @(
                            @{
                                name = "TOTAL GEMS & RUNTIME"
                                value = "]]..setting.botgems().." & "..setting.goodtimes(os.difftime(os.time(),params.timechecker))..[["
                                inline = "false"
                            }
                            @{
                                name = "GrowID"
                                value = "]]..setting.botstatus()..[["
                                inline = "true"
                            }
                            @{
                                name = "WORLD"
                                value = "]]..setting.botworld()..[["
                                inline = "true"
                            }
                            @{
                                name = "STATUS"
                                value = "]]..setting.botnotif()..[["
                                inline = "true"
                            }
                        )
                        footer = @{
                            text = "[Hydrotrium] Caramoy's`nLast update : ]]..(os.date("!%a %b %d, %Y at %I:%M %p", os.time() + 7 * 60 * 60))..[["
                        }
                    }
                )
            }
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Patch -ContentType 'application/json'
        ]]
        local pipe = io.popen("powershell -command -", "w")
        pipe:write(text)
        pipe:close()
    end
end

setting.storageinfo = function()
	if infostorage then
        local text = [[
            $webHookUrl = "]]..linkinfostorage..[[/messages/]]..messageidinfostorage..[["
            $payload = @{
                username = "Caramoy's"
                embeds = @(
                    @{
                        title = "STORAGE STATICS [HARVEST]"
                        color = "]]..math.random(111111,999999)..[["
                        fields = @(
                            @{
                                name = "BLOCK"
                                value = "]]..setting.hookblock()..[["
                                inline = "true"
                            }
                            @{
                                name = "SEED"
                                value = "]]..setting.hookseed()..[["
                                inline = "true"
                            }
                            @{
                                name = "PACK"
                                value = "]]..setting.hookpack()..[["
                                inline = "true"
                            }
                            @{
                                name = "EVENT"
                                value = "]]..setting.hookevent()..[["
                                inline = "true"
                            }
                        )
                        footer = @{
                            text = "[Hydrotrium] Caramoy's`nLast update : ]]..(os.date("!%a %b %d, %Y at %I:%M %p", os.time() + 7 * 60 * 60))..[["
                        }
                    }
                )
            }
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Patch -ContentType 'application/json'
        ]]
        local pipe = io.popen("powershell -command -", "w")
        pipe:write(text)
        pipe:close()
    end
end

setting.botinfo = function(text)
    if webhookstatus then
        text = [[
            $webHookUrl = "]]..webhookstatuslink..[["
            $payload = @{
                content = "]]..text..[["
            }
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Post -ContentType "application/json"
        ]]
        local file = io.popen("powershell -command -", "w")
        file:write(text)
        file:close()
    end
end

setting.reconnect = function(world,id,x,y)
    if getBot().status ~= "online" then
        setting.botinfo("[ "..getBot().name.." ] status is "..getBot().status.." @everyone")
        while getBot().status ~= "online" do
            connect()
            sleep(delayreconnect)
            if getBot().status == "suspended" or getBot().status == "banned" then
                setting.botinfo("[ "..getBot().name.." ] status is "..getBot().status..", terminated script @everyone")
                error()
            end
        end
        local counts = 0
        while getBot().world ~= world:upper() do
            sendPacket("action|join_request\nname|"..world:upper().."\ninvitedWorld|0",3)
            sleep(delaywarp)
            if getBot().world ~= world:upper() then 
                counts = counts + 1
                if counts > 5 then
                    setting.botinfo("[ "..getBot().name.." ] Failed to joining world again, terminated script @everyone")
                    error()
                end
            end
        end
        if id ~= "" then
            local stucks = 0
            while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0", 3)
                sleep(delaywarp)
                if stucks > 3 then
                    setting.botinfo("[ "..getBot().name.." ] Failed to reconnecting bot, stuck at white door. Terminated script @everyone")
                    error()
                end
            end
        end
        if x and y then
            while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                findPath(x,y)
                sleep(150)
            end
        end
        setting.botinfo("[ "..getBot().name.." ] status is "..getBot().status.." @everyone")
    end
    if getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 then
        setting.botinfo("[ "..getBot().name.." ] Stuck at white door ! @everyone")
        if id ~= "" then
            local stucks = 0
            while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0", 3)
                sleep(delaywarp)
                if stucks > 3 then
                    setting.botinfo("[ "..getBot().name.." ] Failed to reconnecting bot, stuck at white door. Terminated script @everyone")
                    error()
                end
            end
        end
        if x and y then
            while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                findPath(x,y)
                sleep(150)
            end
        end
        setting.botinfo("[ "..getBot().name.." ] Already back to pos ! @everyone")
    end
end

setting.warp = function(world,door)
    name = world
    if door ~= "" then
        name = name .. "|" ..door
    end
    if getBot().world ~= string.upper(world) then
        addHook("onvariant","nuked",function (varlist)
            if varlist[0] == "OnConsoleMessage" then
                if string.find(varlist[1],"inaccessible.") or string.find(varlist[1],"level") then
                    nuked = true
                end
                if string.find(varlist[1],"experiencing") then
                    subserver = true
                end
            end
        end)
        while getBot().world ~= string.upper(world) and not nuked and not subserver do
            while getBot().status ~= "online" do
                connect()
                sleep(delayreconnect)
                if getBot().status == "suspended" or getBot().status == "banned" then
                    setting.botinfo("[ "..getBot().name.." ] status is "..getBot().status..", terminated script @everyone")
                    error()
                end
            end
            sendPacket("action|join_request\nname|"..name.."\ninvitedWorld|0",3)
            sleep(delaywarp)
        end
        removeHooks()
        sleep(1000)
    end
    if getBot().world == string.upper(world) then
        if door ~= "" then
            local stuck = 0
            while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 and not wrong do
                while getBot().status ~= "online" do
                    connect()
                    sleep(delayreconnect)
                    if getBot().status == "suspended" or getBot().status == "banned" then
                        setting.botinfo("[ "..getBot().name.." ] status is "..getBot().status..", terminated script @everyone")
                        error()
                    end
                end
                sendPacket("action|join_request\nname|"..name.."\ninvitedWorld|0",3)
                sleep(delaywarp)
                stuck = stuck + 1
                if stuck == 5 then
                    wrong = true
                end
            end
        end
        for i, tile in pairs(getTiles()) do
            if getTile(tile.x,tile.y).extra == 16 then
                fire = true
            end
        end
    end
end

setting.itemFloat = function(id)
	local count = 0
	for _, obj in pairs(getObjects()) do
		if obj.id == id then
			count = count + obj.count
		end
	end
	return count
end

setting.joinworld = function()
    for _, worlds in pairs(worldclearhistory) do
        ::BACK::
        setJob("Clearing history")
        setting.warp(worlds,"")
        if not subserver then
            if not nuked then
                while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                    move(1,0)
                    sleep(500)
                end
                setting.reconnect(worlds,"")
            else
                nuked = false
                sleep(5000)
                print("World clearing history has nuked!!, change ur world history list")
                setting.botinfo("World clearing history has nuked!!, change ur world history list. SC Terminated @everyone")
                error()
            end
        else
            subserver = false
            sleep(5000)
            print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
            setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
            sleep(120000)
            goto BACK
        end
    end
end

setting.buying = function()
    setJob("Buying packs")
    if findItem(112) >= mingems then
        while findItem(112) >= pricepack do
            if upbackpack then
                while getBot().slots < 36 do
                    sendPacket("action|buy\nitem|upgrade_backpack",2)
                    sleep(1000)
                end
            end
            sendPacket("action|buy\nitem|"..debug,2)
            sleep(1000)
            if findItem(packList[1]) >= 200 then
                break
            end
        end
    end
end

setting.storingevents = function()
    for i = params.event , #storageevent do
        ::Here::
        setJob("Dropping events")
        world = storageevent[i]
        setting.warp(world,doorstorageevent)
        setting.webhookinfo()
        if not subserver then
            if not nuked then
                if not wrong then
                    if setting.itemFloat(itemevent[1]) >= limitevent then
                        infoid[world] = "["..setting.itemFloat(itemevent[1]).."] LIMIT !!!"
                        setting.botinfo("Events storage : [ ||"..world.."|| ] has reached limit, skipped world @everyone")
                        print("Events storage : [ "..world.." ] has reached limit, skipped world")
                        params.event = params.event + 1
                        if params.event > #storageevent then
                            infoid[world] = "["..setting.itemFloat(itemevent[1]).."] LIMIT !!!"
                            setting.botinfo("All events storage has reached limit, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                            print("All events storage has reached limit, Removing bot : [ "..getBot().name.." ]")
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                        tileEvent = 0
                    else
                        for y,pack in pairs(itemevent) do
                            for i,tile in pairs(getTiles()) do
                                if separated then
                                    if tile.fg == 0 or tile.bg == 0 then
                                        ::BACK::
                                        findPath(eventX + (tileEvent),eventY - (y - 1))
                                        sleep(1000)
                                        local count = 0
                                        setting.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY - (y - 1))
                                        if eventX + (tileEvent) >= 98 then
                                            eventY = eventY - 1
                                            tileEvent = 0
                                        end
                                        while findItem(pack) > 0 do
                                            drop(pack)
                                            sleep(delaydrop)
                                            setting.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY - (y - 1))
                                            count = count + 1
                                            if count >= 2 then
                                                tileEvent = tileEvent + 1
                                                goto BACK
                                            end
                                        end
                                    end
                                    if findItem(pack) == 0 then
                                        break
                                    end
                                else
                                    if tile.fg == 0 or tile.bg == 0 then
                                        ::BACK::
                                        findPath(eventX + (tileEvent),eventY)
                                        sleep(1000)
                                        local count = 0
                                        setting.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY)
                                        if eventX + (tileEvent) >= 98 then
                                            eventY = eventY - 1
                                            tileEvent = 0
                                        end
                                        while findItem(pack) > 0 do
                                            drop(pack)
                                            sleep(delaydrop)
                                            setting.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY)
                                            count = count + 1
                                            if count >= 2 then
                                                tileEvent = tileEvent + 1
                                                goto BACK
                                            end
                                        end
                                    end
                                    if findItem(pack) == 0 then
                                        break
                                    end
                                end
                            end
                        end
                        sleep(100)
                        break
                    end
                else
                    infoid[world] = "WRONG DOOR !!!"
                    wrong = false
                    sleep(5000)
                    print("[ "..world.." ] Id door events storage is wrong, check ur id door!")
                    setting.botinfo("[ ||"..world.."|| ] Id door events storage is wrong, check ur id door! @everyone")
                    params.event = params.event + 1
                    if params.event > #storageevent then
                        print("All events storage has reached limit")
                        setting.botinfo("All events storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                        if removingbot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                    tileEvent = 0
                end
            else
                infoid[world] = "NUKED !!!"
                nuked = false
                sleep(5000)
                print("[ "..world.." ] event Storage is NUKED, check ur storage!")
                setting.botinfo("[ "..world.." ] event Storage is NUKED, check ur storage! @everyone")
                params.event = params.event + 1
                if params.event > #storageevent then
                    print("All events storage has reached limit!")
                    setting.botinfo("All events storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                    if removingbot then
                        removeBot(getBot().name)
                        sleep(2000)
                    end
                    error()
                end
                tileEvent = 0
            end
        else
            subserver = false
            sleep(5000)
            print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
            setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..setting.itemFloat(itemevent[1]).."]"
    setting.storageinfo()
    if clearhistory then
        setting.joinworld()
    end
end

setting.storingpacks = function()
    for i = params.pack , #storagepack do
        ::Here::
        setJob("Dropping packs")
        world = storagepack[i]
        setting.warp(world,doorstoragepack)
        setting.webhookinfo()
        if not subserver then
            if not nuked then
                if not wrong then
                    if setting.itemFloat(packList[1]) >= limitpack then
                        infoid[world] = "["..setting.itemFloat(packList[1]).."] LIMIT !!!"
                        setting.botinfo("Packs storage : [ ||"..world.."|| ] has reached limit, skipped world @everyone")
                        print("Packs storage : [ "..world.." ] has reached limit, skipped world")
                        params.pack = params.pack + 1
                        if params.pack > #storagepack then
                            infoid[world] = "["..setting.itemFloat(packList[1]).."] LIMIT !!!"
                            setting.botinfo("All packs storage has reached limit, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                            print("All packs storage has reached limit, Removing bot : [ "..getBot().name.." ]")
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                        tilePack = 0
                    else
                        for y,pack in pairs(packList) do
                            for i,tile in pairs(getTiles()) do
                                if separated then
                                    if tile.fg == 0 or tile.bg == 0 then
                                        ::BACK::
                                        findPath(packX + (tilePack),packY - (y-1))
                                        sleep(1000)
                                        local count = 0
                                        setting.reconnect(world,doorstoragepack,packX + (tilePack),packY - (y-1))
                                        if packX + (tilePack) >= 98 then
                                            packY = packY - 1
                                            tilePack = 0
                                        end
                                        while findItem(pack) > 0 do
                                            drop(pack)
                                            sleep(delaydrop)
                                            setting.reconnect(world,doorstoragepack,packX + (tilePack),packY - (y-1))
                                            count = count + 1
                                            if count >= 2 then
                                                tilePack = tilePack + 1
                                                goto BACK
                                            end
                                        end
                                    end
                                    if findItem(pack) == 0 then
                                        break
                                    end
                                else
                                    if tile.fg == 0 or tile.bg == 0 then
                                        ::BACK::
                                        findPath(packX + (tilePack),packY)
                                        sleep(1000)
                                        local count = 0
                                        setting.reconnect(world,doorstoragepack,packX + (tilePack),packY)
                                        if packX + (tilePack) >= 98 then
                                            packY = packY - 1
                                            tilePack = 0
                                        end
                                        while findItem(pack) > 0 do
                                            drop(pack)
                                            sleep(delaydrop)
                                            setting.reconnect(world,doorstoragepack,packX + (tilePack),packY)
                                            count = count + 1
                                            if count >= 2 then
                                                tilePack = tilePack + 1
                                                goto BACK
                                            end
                                        end
                                    end
                                    if findItem(pack) == 0 then
                                        break
                                    end
                                end
                            end
                        end
                        sleep(100)
                        break
                    end
                else
                    infoid[world] = "WRONG DOOR !!!"
                    wrong = false
                    sleep(5000)
                    print("[ "..world.." ] Id door packs storage is wrong, check ur id door!")
                    setting.botinfo("[ ||"..world.."|| ] Id door packs storage is wrong, check ur id door! @everyone")
                    params.pack = params.pack + 1
                    if params.pack > #storagepack then
                        print("All packs storage has reached limit")
                        setting.botinfo("All packs storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                        if removingbot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                    tilePack = 0
                end
            else
                infoid[world] = "NUKED !!!"
                nuked = false
                sleep(5000)
                print("[ "..world.." ] packs Storage is NUKED, check ur storage!")
                setting.botinfo("[ "..world.." ] packs Storage is NUKED, check ur storage! @everyone")
                params.pack = params.pack + 1
                if params.pack > #storagepack then
                    print("All packs storage has reached limit!")
                    setting.botinfo("All packs storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                    if removingbot then
                        removeBot(getBot().name)
                        sleep(2000)
                    end
                    error()
                end
                tilePack = 0
            end
        else
            subserver = false
            sleep(5000)
            print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
            setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..setting.itemFloat(packList[1]).."]"
    setting.storageinfo()
    if clearhistory then
        setting.joinworld()
    end
end

setting.storingseeds = function()
    for i = params.seed , #storageseed do
        ::Here::
        world = storageseed[i]
        setJob("Dropping seeds")
        setting.warp(world,doorstorageseed)
        setting.webhookinfo()
        if not subserver then
            if not nuked then
                if not wrong then
                    if setting.itemFloat(seed) >= limitseed then
                        infoid[world] = "["..setting.itemFloat(seed).."] LIMIT !!!"
                        setting.botinfo("Seeds storage : [ ||"..world.."|| ] has reached limit, skipped world @everyone")
                        print("Seeds storage : [ "..world.." ] has reached limit, skipped world")
                        params.seed = params.seed + 1
                        if params.seed > #storageseed then
                            infoid[world] = "["..setting.itemFloat(seed).."] LIMIT !!!"
                            setting.botinfo("All seeds storage has reached limit, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                            print("All seeds storage has reached limit, Removing bot : [ "..getBot().name.." ] @everyone")
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                        tileSeed = 0
                    else
                        for i,tile in pairs(getTiles()) do
                            if tile.fg == 0 or tile.bg == 0 then
                                ::BACK::
                                findPath(seedX + (tileSeed),seedY)
                                sleep(1000)
                                local count = 0
                                setting.reconnect(world,doorstorageseed,seedX + (tileSeed),seedY)
                                if seedX + (tileSeed) >= 98 then
                                    seedY = seedY - 1
                                    tileSeed = 0
                                end
                                while findItem(seed) > 0 do
                                    drop(seed)
                                    sleep(delaydrop)
                                    setting.reconnect(world,doorstorageseed,seedX + (tileSeed),seedY)
                                    count = count + 1
                                    if count >= 2 then
                                        tileSeed = tileSeed + 1
                                        goto BACK
                                    end
                                end
                            end
                            if findItem(seed) == 0 then
                                break
                            end
                        end
                        sleep(100)
                        break
                    end
                else
                    infoid[world] = "WRONG DOOR !!!"
                    wrong = false
                    sleep(5000)
                    print("[ "..world.." ] Id door seeds storage is wrong, check ur id door!")
                    setting.botinfo("[ "..world.." ] Id door seeds storage is wrong, check ur id door! @everyone")
                    params.seed = params.seed + 1
                    if params.seed > #storageseed then
                        print("All seeds storage has reached limit")
                        setting.botinfo("All seeds storage has reached limit @everyone")
                        if removingbot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                    tileSeed = 0
                end
            else
                infoid[world] = "NUKED !!!"
                nuked = false
                sleep(5000)
                print("[ "..world.." ] seeds Storage is NUKED, check ur storage!")
                setting.botinfo("[ "..world.." ] seeds Storage is NUKED, check ur storage! @everyone")
                params.seed = params.seed + 1
                if params.seed > #storageseed then
                    print("All seeds storage has reached limit!")
                    setting.botinfo("All seeds storage has reached limit! @everyone")
                    if removingbot then
                        removeBot(getBot().name)
                        sleep(2000)
                    end
                    error()
                end
                tileSeed = 0
            end
        else
            subserver = false
            sleep(5000)
            print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
            setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..setting.itemFloat(seed).."]"
    setting.storageinfo()
    if clearhistory then
        setting.joinworld()
    end
end

setting.storingblocks = function()
    for i = params.block , #storageblock do
        ::Here::
        world = storageblock[i]
        setJob("Dropping Blocks")
        setting.warp(world,doorstorageblock)
        setting.webhookinfo()
        if not subserver then
            if not nuked then
                if not wrong then
                    if setting.itemFloat(block) >= limitblock then
                        infoid[world] = "["..setting.itemFloat(block).."] LIMIT !!!"
                        setting.botinfo("Blocks storage : [ ||"..world.."|| ] has reached limit, skipped world @everyone")
                        print("Blocks storage : [ "..world.." ] has reached limit, skipped world")
                        
                        params.block = params.block + 1
                        if params.block > #storageblock then
                            infoid[world] = "["..setting.itemFloat(block).."] LIMIT !!!"
                            setting.botinfo("All blocks storage has reached limit, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                            print("All blocks storage has reached limit, Removing bot : [ "..getBot().name.." ] @everyone")
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                        tileBlock = 0
                    else
                        for i,tile in pairs(getTiles()) do
                            if tile.fg == 0 or tile.bg == 0 then
                                ::BACK::
                                findPath(blockX + (tileBlock),blockY)
                                sleep(1000)
                                local count = 0
                                setting.reconnect(world,doorstorageblock,blockX + (tileBlock),blockY)
                                if blockX + (tileBlock) >= 98 then
                                    blockY = blockY - 1
                                    tileBlock = 0
                                end
                                while findItem(block) > 0 do
                                    drop(block)
                                    sleep(delaydrop)
                                    setting.reconnect(world,doorstorageblock,blockX + (tileBlock),blockY)
                                    count = count + 1
                                    if count >= 2 then
                                        tileBlock = tileBlock + 1
                                        goto BACK
                                    end
                                end
                            end
                            if findItem(block) == 0 then
                                break
                            end
                        end
                        sleep(100)
                        break
                    end
                else
                    infoid[world] = "WRONG DOOR !!!"
                    wrong = false
                    sleep(5000)
                    print("[ "..world.." ] Id door blocks storage is wrong, check ur id door!")
                    setting.botinfo("[ "..world.." ] Id door blocks storage is wrong, check ur id door! @everyone")
                    params.block = params.block + 1
                    if params.block > #storageblock then
                        print("All blocks storage has reached limit")
                        setting.botinfo("All blocks storage has reached limit @everyone")
                        if removingbot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                    tileBlock = 0
                end
            else
                infoid[world] = "NUKED !!!"
                nuked = false
                sleep(5000)
                print("[ "..world.." ] blocks Storage is NUKED, check ur storage!")
                setting.botinfo("[ "..world.." ] blocks Storage is NUKED, check ur storage! @everyone")
                params.block = params.block + 1
                if params.block > #storageblock then
                    print("All blocks storage has reached limit!")
                    setting.botinfo("All blocks storage has reached limit! @everyone")
                    if removingbot then
                        removeBot(getBot().name)
                        sleep(2000)
                    end
                    error()
                end
                tileBlock = 0
            end
        else
            subserver = false
            sleep(5000)
            print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
            setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..setting.itemFloat(block).."]"
    setting.storageinfo()
    if clearhistory then
        setting.joinworld()
    end
end

setting.rechecking = function(threads)
    for i = 1,2 do
        for _, tile in pairs(getTiles()) do
            if tile.fg == seed and tile.ready then
                if findItem(idwearitem) == 0 then
                    if wearitem then
                        setting.support()
                        setJob("Rechecking")
                        setting.warp(threads,doorfarmList)
                    end
                end
                if findItem(block) > 180 then
                    if recycle then
                        setting.recycles()
                    else
                        setting.storingblocks()
                        setJob("Rechecking")
                        setting.warp(threads,doorfarmList)
                    end
                end
                if findItem(itemevent[1]) > amount then
                    setting.storingevents()
                    setJob("Rechecking")
                    setting.warp(threads,doorfarmList)
                elseif findItem(seed) > 180 then
                    setting.storingseeds()
                    setJob("Rechecking")
                    setting.warp(threads,doorfarmList)
                elseif findItem(112) >= mingems and buypack then
                    setting.buying()
                    setting.storingpacks()
                    setJob("Rechecking")
                    setting.warp(threads,doorfarmList)
                end
                findPath(tile.x,tile.y)
                sleep(delayharvest)
                setting.reconnect(threads,doorfarmList,tile.x,tile.y)
                if tile.fg == seed then
                    punch(0,0)
                    sleep(delayharvest)
                    setting.reconnect(threads,doorfarmList,tile.x,tile.y)
                end
                if ignoregems then
                    collect(range,112)
                else
                    collect(range)
                end
                sleep(30)
            end
        end
    end
    for _, obj in pairs(getObjects()) do
        if obj.id == block then
            if setting.itemFloat(block) ~= 0 then
                findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                sleep(30)
                setting.reconnect(threads,doorfarmList,math.floor(obj.x / 32),math.floor(obj.y / 32))
                if ignoregems then
                    collect(range,112)
                else
                    collect(range)
                end
                sleep(30)
            end
            if findItem(block) > 180 then
                if recycle then
                    setting.recycles(threads)
                else
                    setting.storingblocks()
                    setJob("Rechecking")
                    setting.warp(threads,doorfarmList)
                end
            end
            if findItem(itemevent[1]) > amount then
                setting.storingevents()
                setJob("Rechecking")
                setting.warp(threads,doorfarmList)
            elseif findItem(seed) > 180 then
                setting.storingseeds()
                setJob("Rechecking")
                setting.warp(threads,doorfarmList)
            elseif findItem(112) > mingems and buypack then
                setting.buying()
                setting.storingpacks()
                setJob("Rechecking")
                setting.warp(threads,doorfarmList)
            end
        end
    end
end

setting.running = function(threads)
    setJob("Harvest")
    tileA = 99
    tileB = 0
    tileC = -1
    tileD = 0
    ::BACK::
    for y = -1, 53 do
        for x = tileA, tileB, tileC do
            if getTile(x,y).fg == seed and getTile(x,y).ready then
                if findItem(idwearitem) == 0 then
                    if wearitem then
                        setting.support()
                        setJob("Harvest")
                        setting.warp(threads,doorfarmList)
                        goto BACK
                    end
                end
                if findItem(block) > 180 then
                    if recycle then
                        setting.recycles(threads)
                    else
                        setting.storingblocks()
                        setJob("Harvest")
                        setting.warp(threads,doorfarmList)
                        goto BACK
                    end
                end
                if findItem(itemevent[1]) > amount then
                    setting.storingevents()
                    setJob("Harvest")
                    setting.warp(threads,doorfarmList)
                    goto BACK
                elseif findItem(seed) > 180 then
                    setting.storingseeds()
                    setJob("Harvest")
                    setting.warp(threads,doorfarmList)
                    goto BACK
                elseif findItem(112) > mingems and buypack then
                    setting.buying()
                    setting.storingpacks()
                    setJob("Harvest")
                    setting.warp(threads,doorfarmList)
                    goto BACK
                end
                findPath(x,y)
                sleep(delayharvest)
                setting.reconnect(threads,doorfarmList,x,y)
                if getTile(x,y).fg == seed then
                    punch(0,0)
                    sleep(delayharvest)
                    setting.reconnect(threads,doorfarmList,x,y)
                end
                if ignoregems then
                    collect(range,112)
                else
                    collect(range)
                end
                sleep(25)
            end
        end
        if tileD == 1 then
            if tileA == 0 then
                tileA = 99
                tileB = 0
                tileC = -1
                tileD = 0
            elseif tileA == 99 then
                tileA = 0
                tileB = 99
                tileC = 1
                tileD = 0
            end
        elseif tileD == 0 then
            tileD = tileD + 1
        end
    end
end

setting.support = function()
    ::BACK::
    setJob("Take support items")
    world = setting.split(worldwearitem[index],"[^:]+")[1]
    door = setting.split(worldwearitem[index],"[^:]+")[2]
    setting.warp(world,door)
    if not subserver then
        if not nuked then
            if not wrong then
                if findItem(idwearitem) == 0 and setting.itemFloat(idwearitem) >= keep then
                    for _, obj in pairs(getObjects()) do
                        if obj.id == idwearitem then
                            findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                            sleep(1000)
                            collect(range)
                            sleep(1000)
                            setting.reconnect(world,door,math.floor(obj.x / 32),math.floor(obj.y / 32))
                            if findItem(idwearitem) > 0  then
                                break
                            end
                        end
                    end
                    move(-1,0)
                    sleep(500)
                    wear(idwearitem)
                    sleep(500)
                    drop(idwearitem,findItem(idwearitem) - keep)
                    sleep(500)
                    print("[ ||"..getBot().name.."|| ] Success take and wear the support items!")
                    setting.botinfo("[ ||"..getBot().name.."|| ] Success take and wear the support items!")
                else
                    print("Support item is empty, Drop the support item right now!")
                    setting.botinfo("Support item is empty, Drop the support item right now! @everyone")
                end
            else
                wrong = false
                sleep(5000)
                print("Id door world take support items is wrong, check ur id door!")
                setting.botinfo("Id door world take support items is wrong, check ur id door! @everyone")
                error()
            end
        else
            nuked = false
            sleep(5000)
            print("World take support items is nuked, check ur world!")
            setting.botinfo("World take support items is nuked, check ur world! @everyone")
            error()
        end
    else
        subserver = false
        sleep(5000)
        print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
        setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
        sleep(120000)
        goto BACK
    end
end

setting.writeFile = function(threads)
    local file = io.open("WorldStatus.txt","a")
    file:write(threads.."\n")
    file:close()
end

if Information == "Script made by Caramoy's Syndicate, Link Discord : https://discord.com/invite/fTTKW8vvuq" then
    sleep(math.random(300,3000))
    for idx, value in ipairs(worlds) do
        ::BACK::
        setting.storageinfo()
        setting.warp(value,doorfarmList)
        setting.webhookinfo()
        if not subserver then
            if not nuked then
                if not wrong then
                    if not fire then
                        setting.running(value)
                        setting.rechecking(value)
                    else
                        setting.writeFile("[ "..value.." ] is burn")
                        sleep(1000)
                        fire = false
                        sleep(5000)
                        print(""..value.." is burn, skipped world")
                        setting.botinfo("[ ||"..value.."|| ] is burn, skipped world @everyone")
                    end
                else
                    setting.writeFile("[ "..value.." ] is wrong id")
                    sleep(1000)
                    wrong = false
                    sleep(5000)
                    print(""..value.." is wrong door id, skipped world")
                    setting.botinfo("[ ||"..value.."|| ] is wrong door id, skipped world @everyone")
                end
            else
                setting.writeFile("[ "..value.." ] is NUKED !!")
                sleep(1000)
                nuked = false
                sleep(5000)
                print(""..value.." is NUKED!, check ur world !!")
                setting.botinfo("[ ||"..value.."|| ] is NUKED!, check ur world !! @everyone")
            end
        else
            subserver = false
            sleep(5000)
            print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
            setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
            sleep(120000)
            goto BACK
        end
    end
    print("[ "..getBot().name.." ] Already finished all world, Terminated script!")
    setting.botinfo("[ ||"..getBot().name.."|| ] Already finished all world, Terminated script! @everyone")
    setJob("Finished all worlds")
    if removingbot then
        removeBot(getBot().name)
        sleep(2000)
    end
    error()
else
    print("Script made by Caramoy's Syndicate, Link Discord : https://discord.com/invite/fTTKW8vvuq")
    setting.botinfo("Script made by Caramoy's Syndicate, Link Discord : https://discord.com/invite/fTTKW8vvuq")
end
